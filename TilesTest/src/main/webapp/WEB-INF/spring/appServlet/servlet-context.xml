<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven /> 

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" /> 
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- ======= #15. tiles 프레임워크를 사용할 것이므로 아래의 것은 반드시 생략해야만 한다. ======= -->
	<!-- 
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean> 
	-->
	
	
	<!-- ====== #12. 컨트롤러(*.java)가 위치하는 패키지명 지정하기 -->
	<!-- com.spring.tilestest 은 모든 컨트롤러(*.java)파일은 항상
	     com.spring.tilestest 패키지 안에 있어야 한다. -->
	<!-- <context:component-scan base-package="com.spring.tilestest" /> -->
	<context:component-scan base-package="com.spring.*" />
	<!-- com.spring.* 은 모든 컨트롤러(*.java)파일은 항상
	     com.spring. 으로 시작하는 패키지 안에 있어야 한다. -->
	<!-- ==== Component Scan 은 XML 파일에 일일이 빈등록을 하지 않고 각 빈 클래스에 @Component 를 써줌으로서 
	                  해당 클래스가 자동으로 빈등록이 이루어지도록 해주는 것이다. 
	          @Component 로 사용되어질 클래스의 패키지를 기재해주면 된다. -->


    <!-- ===== #13. 일단 스프링에서 트랜잭션 처리를 하기 위해서는
	         먼저 src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 파일에
	     Namespaces 에 aop를 체크를 하고,  
                아래와 같이 트랜잭션 처리를 위한 aop 포인트컷을 등록을 해야 한다. -->    
    <!--  
		- 아래의 <aop:aspectj-autoproxy />가 AOP 관련 어노테이션 동작이 가능하게 설정해줌.
    -->	
	<!--  AOP 관련 어노테이션 동작이 가능하게 설정 -->	
	<aop:aspectj-autoproxy /> <!-- 추가 -->	     
	 
	<aop:config proxy-target-class="true">
	  <aop:pointcut id="controllerOperation" expression="execution(public * com.spring..*Controller.*(..))" />
    </aop:config>
    
    
    <!-- ======= #14. tiles 프레임워크 구현을 위한 빈을 등록한다. ======= -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                 <beans:value>/WEB-INF/tiles/tiles-layout.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="1"/>
    </beans:bean>
		
</beans:beans>





